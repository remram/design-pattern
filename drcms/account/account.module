<?php

/**
 * @file
 * Contains account.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\general\Helper\MainHelper;

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param RouteMatchInterface $route_match
 * @return string
 */
function help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the account module.
    case 'help.page.account':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for account related stuff') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function theme() {
  return [
    'account' => [
      'template' => 'account',
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_uninstall().
 *
 * The service will drop the sequences table of this entity type by calling dropStorage()
 */
function uninstall() {
  $service = \Drupal::service('arc.general.sequences_service');
  $moduleName = basename(__FILE__, '.module');
  $service->dropStorage($moduleName);
}

/**
 * Implements hook_entity_operation_alter().
 *
 * @param array $operations
 * @param EntityInterface $entity
 */
function entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (!(\Drupal::currentUser()->hasPermission('access content'))) {
    return;
  }

  $entityType = $entity->getEntityTypeId();

  // execute the code only for the my_entity entity
  if ($entityType === MainHelper::MY_ENTITY) {
    $mediaTargetId = $entity->get('vector_logo')->target_id;

    if ($mediaTargetId) {
      // add "Download logo vector file"
      $operations['download-vector-logo'] = [
        'title' => t('Download logo vector file'),
        'weight' => 15,
        'url' => Url::fromRoute('entity.arc_media.download_vector_file', ['media' => $mediaTargetId]),
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function form_menu_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $attributes = \Drupal::request()->attributes;
  $route = $attributes->get("_route");

  $entityType = explode('.', $route)[1];

  $entityTypes = [
    'my_entity',
  ];
  if(in_array($entityType, $entityTypes)){
    $entityId = $attributes->get($entityType);
    $entityObject = \Drupal::entityTypeManager()->getStorage($entityType)->load($entityId);

    if (isset($form['relation'])) {
      if($entityId && $entityType){
        $form['relation']['widget'][0]['target_id']['#default_value'] = $entityObject;
        $form['relation']['widget'][0]['target_type']['#default_value'] = $entityType;
      }

      //hide relation field
      $form['relation']['#attributes']['style'][] = 'display: none';
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function form_my_entity_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // remove image fields from add form
  unset($form[MainHelper::FORM_LEFT_COLUMN][MainHelper::FORM_FIELDSET_GENERAL_INFORMATION]['logo']);
  unset($form[MainHelper::FORM_LEFT_COLUMN][MainHelper::FORM_FIELDSET_GENERAL_INFORMATION]['vector_logo']);
  unset($form[MainHelper::FORM_RIGHT_COLUMN][MainHelper::FORM_FIELDSET_HEADER]);
  unset($form[MainHelper::FORM_RIGHT_COLUMN][MainHelper::FORM_FIELDSET_OVERVIEW]);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * @param EntityInterface $entity
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function my_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $entity = setAccountVisibilityUnset($entity);
  // make sure company name is same as account name
  $name = $entity->get('name')->value;
  $company = $entity->get('company')->value;
  if ($company !== $name) {
    $entity->set('company', $name);
  }

  // make sure value of num_calc_top_products is sum of top_products_membership and num_set_top_products
  /** @var \Drupal\account\Service\MyEntityEntityService $my_entityEntityService */
  $my_entityEntityService = \Drupal::service('arc.account.my_entity_entity_service');
  $my_entityEntityService->calculateTopProductsNumber($entity);

  // check and set first letter filter
  post_save_entity_first_letter_filter($entity);
}

/**
 * It will saves the first letter filter value to the entity. The value of the
 * first letter is transmitted by request header and NOT through $entity!
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function post_save_entity_first_letter_filter(ContentEntityInterface $entity) {
  /** @var \Symfony\Component\HttpFoundation\Request $request */
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $firstLetterID = $request->get('1st_letter_select_option');
  $oldFirstLetterId = $entity->get('filter_relation')->target_id;

  if ($firstLetterID && ((int)$firstLetterID !== (int)$oldFirstLetterId)) {
    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
    $entityTypeManager = \Drupal::service('entity_type.manager');
    /** @var \Drupal\Core\Entity\ContentEntityInterface $firstLetterEntity */
    $firstLetterEntity = $entityTypeManager->getStorage(MainHelper::FILTER)->load($firstLetterID);

    // Insert/Update only if the ID -> entity is correct
    if($firstLetterEntity instanceof ContentEntityInterface) {
      /** @var \Drupal\general\Service\ArcEntityService $arcEntityService */
      $arcEntityService = \Drupal::service('arc.general.arc_entity_service');
      // update year filter relation in object entity
      $entity = $arcEntityService->updateRelationValuesOfSpecificType($entity, 'filter_relation', '1st_letter', $firstLetterID);
    }
  }
}